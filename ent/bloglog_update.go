// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/jungmu/go-web/ent/bloglog"
	"github.com/jungmu/go-web/ent/predicate"
)

// BlogLogUpdate is the builder for updating BlogLog entities.
type BlogLogUpdate struct {
	config
	hooks    []Hook
	mutation *BlogLogMutation
}

// Where appends a list predicates to the BlogLogUpdate builder.
func (blu *BlogLogUpdate) Where(ps ...predicate.BlogLog) *BlogLogUpdate {
	blu.mutation.Where(ps...)
	return blu
}

// SetBlogID sets the "blog_id" field.
func (blu *BlogLogUpdate) SetBlogID(i int64) *BlogLogUpdate {
	blu.mutation.ResetBlogID()
	blu.mutation.SetBlogID(i)
	return blu
}

// AddBlogID adds i to the "blog_id" field.
func (blu *BlogLogUpdate) AddBlogID(i int64) *BlogLogUpdate {
	blu.mutation.AddBlogID(i)
	return blu
}

// SetURL sets the "url" field.
func (blu *BlogLogUpdate) SetURL(s string) *BlogLogUpdate {
	blu.mutation.SetURL(s)
	return blu
}

// SetReason sets the "reason" field.
func (blu *BlogLogUpdate) SetReason(s string) *BlogLogUpdate {
	blu.mutation.SetReason(s)
	return blu
}

// SetDetail sets the "detail" field.
func (blu *BlogLogUpdate) SetDetail(s string) *BlogLogUpdate {
	blu.mutation.SetDetail(s)
	return blu
}

// SetClientIP sets the "client_ip" field.
func (blu *BlogLogUpdate) SetClientIP(s string) *BlogLogUpdate {
	blu.mutation.SetClientIP(s)
	return blu
}

// SetCreateDatetime sets the "create_datetime" field.
func (blu *BlogLogUpdate) SetCreateDatetime(t time.Time) *BlogLogUpdate {
	blu.mutation.SetCreateDatetime(t)
	return blu
}

// SetNillableCreateDatetime sets the "create_datetime" field if the given value is not nil.
func (blu *BlogLogUpdate) SetNillableCreateDatetime(t *time.Time) *BlogLogUpdate {
	if t != nil {
		blu.SetCreateDatetime(*t)
	}
	return blu
}

// Mutation returns the BlogLogMutation object of the builder.
func (blu *BlogLogUpdate) Mutation() *BlogLogMutation {
	return blu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (blu *BlogLogUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(blu.hooks) == 0 {
		affected, err = blu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*BlogLogMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			blu.mutation = mutation
			affected, err = blu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(blu.hooks) - 1; i >= 0; i-- {
			if blu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = blu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, blu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (blu *BlogLogUpdate) SaveX(ctx context.Context) int {
	affected, err := blu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (blu *BlogLogUpdate) Exec(ctx context.Context) error {
	_, err := blu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (blu *BlogLogUpdate) ExecX(ctx context.Context) {
	if err := blu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (blu *BlogLogUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   bloglog.Table,
			Columns: bloglog.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: bloglog.FieldID,
			},
		},
	}
	if ps := blu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := blu.mutation.BlogID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: bloglog.FieldBlogID,
		})
	}
	if value, ok := blu.mutation.AddedBlogID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: bloglog.FieldBlogID,
		})
	}
	if value, ok := blu.mutation.URL(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: bloglog.FieldURL,
		})
	}
	if value, ok := blu.mutation.Reason(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: bloglog.FieldReason,
		})
	}
	if value, ok := blu.mutation.Detail(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: bloglog.FieldDetail,
		})
	}
	if value, ok := blu.mutation.ClientIP(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: bloglog.FieldClientIP,
		})
	}
	if value, ok := blu.mutation.CreateDatetime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: bloglog.FieldCreateDatetime,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, blu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{bloglog.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// BlogLogUpdateOne is the builder for updating a single BlogLog entity.
type BlogLogUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *BlogLogMutation
}

// SetBlogID sets the "blog_id" field.
func (bluo *BlogLogUpdateOne) SetBlogID(i int64) *BlogLogUpdateOne {
	bluo.mutation.ResetBlogID()
	bluo.mutation.SetBlogID(i)
	return bluo
}

// AddBlogID adds i to the "blog_id" field.
func (bluo *BlogLogUpdateOne) AddBlogID(i int64) *BlogLogUpdateOne {
	bluo.mutation.AddBlogID(i)
	return bluo
}

// SetURL sets the "url" field.
func (bluo *BlogLogUpdateOne) SetURL(s string) *BlogLogUpdateOne {
	bluo.mutation.SetURL(s)
	return bluo
}

// SetReason sets the "reason" field.
func (bluo *BlogLogUpdateOne) SetReason(s string) *BlogLogUpdateOne {
	bluo.mutation.SetReason(s)
	return bluo
}

// SetDetail sets the "detail" field.
func (bluo *BlogLogUpdateOne) SetDetail(s string) *BlogLogUpdateOne {
	bluo.mutation.SetDetail(s)
	return bluo
}

// SetClientIP sets the "client_ip" field.
func (bluo *BlogLogUpdateOne) SetClientIP(s string) *BlogLogUpdateOne {
	bluo.mutation.SetClientIP(s)
	return bluo
}

// SetCreateDatetime sets the "create_datetime" field.
func (bluo *BlogLogUpdateOne) SetCreateDatetime(t time.Time) *BlogLogUpdateOne {
	bluo.mutation.SetCreateDatetime(t)
	return bluo
}

// SetNillableCreateDatetime sets the "create_datetime" field if the given value is not nil.
func (bluo *BlogLogUpdateOne) SetNillableCreateDatetime(t *time.Time) *BlogLogUpdateOne {
	if t != nil {
		bluo.SetCreateDatetime(*t)
	}
	return bluo
}

// Mutation returns the BlogLogMutation object of the builder.
func (bluo *BlogLogUpdateOne) Mutation() *BlogLogMutation {
	return bluo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (bluo *BlogLogUpdateOne) Select(field string, fields ...string) *BlogLogUpdateOne {
	bluo.fields = append([]string{field}, fields...)
	return bluo
}

// Save executes the query and returns the updated BlogLog entity.
func (bluo *BlogLogUpdateOne) Save(ctx context.Context) (*BlogLog, error) {
	var (
		err  error
		node *BlogLog
	)
	if len(bluo.hooks) == 0 {
		node, err = bluo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*BlogLogMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			bluo.mutation = mutation
			node, err = bluo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(bluo.hooks) - 1; i >= 0; i-- {
			if bluo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = bluo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, bluo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*BlogLog)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from BlogLogMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (bluo *BlogLogUpdateOne) SaveX(ctx context.Context) *BlogLog {
	node, err := bluo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (bluo *BlogLogUpdateOne) Exec(ctx context.Context) error {
	_, err := bluo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bluo *BlogLogUpdateOne) ExecX(ctx context.Context) {
	if err := bluo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (bluo *BlogLogUpdateOne) sqlSave(ctx context.Context) (_node *BlogLog, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   bloglog.Table,
			Columns: bloglog.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: bloglog.FieldID,
			},
		},
	}
	id, ok := bluo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "BlogLog.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := bluo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, bloglog.FieldID)
		for _, f := range fields {
			if !bloglog.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != bloglog.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := bluo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := bluo.mutation.BlogID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: bloglog.FieldBlogID,
		})
	}
	if value, ok := bluo.mutation.AddedBlogID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: bloglog.FieldBlogID,
		})
	}
	if value, ok := bluo.mutation.URL(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: bloglog.FieldURL,
		})
	}
	if value, ok := bluo.mutation.Reason(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: bloglog.FieldReason,
		})
	}
	if value, ok := bluo.mutation.Detail(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: bloglog.FieldDetail,
		})
	}
	if value, ok := bluo.mutation.ClientIP(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: bloglog.FieldClientIP,
		})
	}
	if value, ok := bluo.mutation.CreateDatetime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: bloglog.FieldCreateDatetime,
		})
	}
	_node = &BlogLog{config: bluo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, bluo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{bloglog.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
