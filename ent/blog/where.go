// Code generated by ent, DO NOT EDIT.

package blog

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/jungmu/go-web/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int64) predicate.Blog {
	return predicate.Blog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.Blog {
	return predicate.Blog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.Blog {
	return predicate.Blog(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.Blog {
	return predicate.Blog(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.Blog {
	return predicate.Blog(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.Blog {
	return predicate.Blog(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.Blog {
	return predicate.Blog(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.Blog {
	return predicate.Blog(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.Blog {
	return predicate.Blog(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// Title applies equality check predicate on the "title" field. It's identical to TitleEQ.
func Title(v string) predicate.Blog {
	return predicate.Blog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTitle), v))
	})
}

// SubTitle applies equality check predicate on the "sub_title" field. It's identical to SubTitleEQ.
func SubTitle(v string) predicate.Blog {
	return predicate.Blog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSubTitle), v))
	})
}

// Tags applies equality check predicate on the "tags" field. It's identical to TagsEQ.
func Tags(v string) predicate.Blog {
	return predicate.Blog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTags), v))
	})
}

// Content applies equality check predicate on the "content" field. It's identical to ContentEQ.
func Content(v string) predicate.Blog {
	return predicate.Blog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldContent), v))
	})
}

// UpdateDatetime applies equality check predicate on the "update_datetime" field. It's identical to UpdateDatetimeEQ.
func UpdateDatetime(v time.Time) predicate.Blog {
	return predicate.Blog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateDatetime), v))
	})
}

// CreateDatetime applies equality check predicate on the "create_datetime" field. It's identical to CreateDatetimeEQ.
func CreateDatetime(v time.Time) predicate.Blog {
	return predicate.Blog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateDatetime), v))
	})
}

// TitleEQ applies the EQ predicate on the "title" field.
func TitleEQ(v string) predicate.Blog {
	return predicate.Blog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTitle), v))
	})
}

// TitleNEQ applies the NEQ predicate on the "title" field.
func TitleNEQ(v string) predicate.Blog {
	return predicate.Blog(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTitle), v))
	})
}

// TitleIn applies the In predicate on the "title" field.
func TitleIn(vs ...string) predicate.Blog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Blog(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldTitle), v...))
	})
}

// TitleNotIn applies the NotIn predicate on the "title" field.
func TitleNotIn(vs ...string) predicate.Blog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Blog(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldTitle), v...))
	})
}

// TitleGT applies the GT predicate on the "title" field.
func TitleGT(v string) predicate.Blog {
	return predicate.Blog(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTitle), v))
	})
}

// TitleGTE applies the GTE predicate on the "title" field.
func TitleGTE(v string) predicate.Blog {
	return predicate.Blog(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTitle), v))
	})
}

// TitleLT applies the LT predicate on the "title" field.
func TitleLT(v string) predicate.Blog {
	return predicate.Blog(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTitle), v))
	})
}

// TitleLTE applies the LTE predicate on the "title" field.
func TitleLTE(v string) predicate.Blog {
	return predicate.Blog(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTitle), v))
	})
}

// TitleContains applies the Contains predicate on the "title" field.
func TitleContains(v string) predicate.Blog {
	return predicate.Blog(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldTitle), v))
	})
}

// TitleHasPrefix applies the HasPrefix predicate on the "title" field.
func TitleHasPrefix(v string) predicate.Blog {
	return predicate.Blog(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldTitle), v))
	})
}

// TitleHasSuffix applies the HasSuffix predicate on the "title" field.
func TitleHasSuffix(v string) predicate.Blog {
	return predicate.Blog(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldTitle), v))
	})
}

// TitleEqualFold applies the EqualFold predicate on the "title" field.
func TitleEqualFold(v string) predicate.Blog {
	return predicate.Blog(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldTitle), v))
	})
}

// TitleContainsFold applies the ContainsFold predicate on the "title" field.
func TitleContainsFold(v string) predicate.Blog {
	return predicate.Blog(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldTitle), v))
	})
}

// SubTitleEQ applies the EQ predicate on the "sub_title" field.
func SubTitleEQ(v string) predicate.Blog {
	return predicate.Blog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSubTitle), v))
	})
}

// SubTitleNEQ applies the NEQ predicate on the "sub_title" field.
func SubTitleNEQ(v string) predicate.Blog {
	return predicate.Blog(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSubTitle), v))
	})
}

// SubTitleIn applies the In predicate on the "sub_title" field.
func SubTitleIn(vs ...string) predicate.Blog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Blog(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldSubTitle), v...))
	})
}

// SubTitleNotIn applies the NotIn predicate on the "sub_title" field.
func SubTitleNotIn(vs ...string) predicate.Blog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Blog(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldSubTitle), v...))
	})
}

// SubTitleGT applies the GT predicate on the "sub_title" field.
func SubTitleGT(v string) predicate.Blog {
	return predicate.Blog(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSubTitle), v))
	})
}

// SubTitleGTE applies the GTE predicate on the "sub_title" field.
func SubTitleGTE(v string) predicate.Blog {
	return predicate.Blog(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSubTitle), v))
	})
}

// SubTitleLT applies the LT predicate on the "sub_title" field.
func SubTitleLT(v string) predicate.Blog {
	return predicate.Blog(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSubTitle), v))
	})
}

// SubTitleLTE applies the LTE predicate on the "sub_title" field.
func SubTitleLTE(v string) predicate.Blog {
	return predicate.Blog(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSubTitle), v))
	})
}

// SubTitleContains applies the Contains predicate on the "sub_title" field.
func SubTitleContains(v string) predicate.Blog {
	return predicate.Blog(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldSubTitle), v))
	})
}

// SubTitleHasPrefix applies the HasPrefix predicate on the "sub_title" field.
func SubTitleHasPrefix(v string) predicate.Blog {
	return predicate.Blog(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldSubTitle), v))
	})
}

// SubTitleHasSuffix applies the HasSuffix predicate on the "sub_title" field.
func SubTitleHasSuffix(v string) predicate.Blog {
	return predicate.Blog(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldSubTitle), v))
	})
}

// SubTitleEqualFold applies the EqualFold predicate on the "sub_title" field.
func SubTitleEqualFold(v string) predicate.Blog {
	return predicate.Blog(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldSubTitle), v))
	})
}

// SubTitleContainsFold applies the ContainsFold predicate on the "sub_title" field.
func SubTitleContainsFold(v string) predicate.Blog {
	return predicate.Blog(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldSubTitle), v))
	})
}

// TagsEQ applies the EQ predicate on the "tags" field.
func TagsEQ(v string) predicate.Blog {
	return predicate.Blog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTags), v))
	})
}

// TagsNEQ applies the NEQ predicate on the "tags" field.
func TagsNEQ(v string) predicate.Blog {
	return predicate.Blog(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTags), v))
	})
}

// TagsIn applies the In predicate on the "tags" field.
func TagsIn(vs ...string) predicate.Blog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Blog(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldTags), v...))
	})
}

// TagsNotIn applies the NotIn predicate on the "tags" field.
func TagsNotIn(vs ...string) predicate.Blog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Blog(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldTags), v...))
	})
}

// TagsGT applies the GT predicate on the "tags" field.
func TagsGT(v string) predicate.Blog {
	return predicate.Blog(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTags), v))
	})
}

// TagsGTE applies the GTE predicate on the "tags" field.
func TagsGTE(v string) predicate.Blog {
	return predicate.Blog(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTags), v))
	})
}

// TagsLT applies the LT predicate on the "tags" field.
func TagsLT(v string) predicate.Blog {
	return predicate.Blog(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTags), v))
	})
}

// TagsLTE applies the LTE predicate on the "tags" field.
func TagsLTE(v string) predicate.Blog {
	return predicate.Blog(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTags), v))
	})
}

// TagsContains applies the Contains predicate on the "tags" field.
func TagsContains(v string) predicate.Blog {
	return predicate.Blog(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldTags), v))
	})
}

// TagsHasPrefix applies the HasPrefix predicate on the "tags" field.
func TagsHasPrefix(v string) predicate.Blog {
	return predicate.Blog(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldTags), v))
	})
}

// TagsHasSuffix applies the HasSuffix predicate on the "tags" field.
func TagsHasSuffix(v string) predicate.Blog {
	return predicate.Blog(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldTags), v))
	})
}

// TagsEqualFold applies the EqualFold predicate on the "tags" field.
func TagsEqualFold(v string) predicate.Blog {
	return predicate.Blog(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldTags), v))
	})
}

// TagsContainsFold applies the ContainsFold predicate on the "tags" field.
func TagsContainsFold(v string) predicate.Blog {
	return predicate.Blog(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldTags), v))
	})
}

// ContentEQ applies the EQ predicate on the "content" field.
func ContentEQ(v string) predicate.Blog {
	return predicate.Blog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldContent), v))
	})
}

// ContentNEQ applies the NEQ predicate on the "content" field.
func ContentNEQ(v string) predicate.Blog {
	return predicate.Blog(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldContent), v))
	})
}

// ContentIn applies the In predicate on the "content" field.
func ContentIn(vs ...string) predicate.Blog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Blog(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldContent), v...))
	})
}

// ContentNotIn applies the NotIn predicate on the "content" field.
func ContentNotIn(vs ...string) predicate.Blog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Blog(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldContent), v...))
	})
}

// ContentGT applies the GT predicate on the "content" field.
func ContentGT(v string) predicate.Blog {
	return predicate.Blog(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldContent), v))
	})
}

// ContentGTE applies the GTE predicate on the "content" field.
func ContentGTE(v string) predicate.Blog {
	return predicate.Blog(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldContent), v))
	})
}

// ContentLT applies the LT predicate on the "content" field.
func ContentLT(v string) predicate.Blog {
	return predicate.Blog(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldContent), v))
	})
}

// ContentLTE applies the LTE predicate on the "content" field.
func ContentLTE(v string) predicate.Blog {
	return predicate.Blog(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldContent), v))
	})
}

// ContentContains applies the Contains predicate on the "content" field.
func ContentContains(v string) predicate.Blog {
	return predicate.Blog(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldContent), v))
	})
}

// ContentHasPrefix applies the HasPrefix predicate on the "content" field.
func ContentHasPrefix(v string) predicate.Blog {
	return predicate.Blog(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldContent), v))
	})
}

// ContentHasSuffix applies the HasSuffix predicate on the "content" field.
func ContentHasSuffix(v string) predicate.Blog {
	return predicate.Blog(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldContent), v))
	})
}

// ContentEqualFold applies the EqualFold predicate on the "content" field.
func ContentEqualFold(v string) predicate.Blog {
	return predicate.Blog(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldContent), v))
	})
}

// ContentContainsFold applies the ContainsFold predicate on the "content" field.
func ContentContainsFold(v string) predicate.Blog {
	return predicate.Blog(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldContent), v))
	})
}

// UpdateDatetimeEQ applies the EQ predicate on the "update_datetime" field.
func UpdateDatetimeEQ(v time.Time) predicate.Blog {
	return predicate.Blog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateDatetime), v))
	})
}

// UpdateDatetimeNEQ applies the NEQ predicate on the "update_datetime" field.
func UpdateDatetimeNEQ(v time.Time) predicate.Blog {
	return predicate.Blog(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdateDatetime), v))
	})
}

// UpdateDatetimeIn applies the In predicate on the "update_datetime" field.
func UpdateDatetimeIn(vs ...time.Time) predicate.Blog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Blog(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldUpdateDatetime), v...))
	})
}

// UpdateDatetimeNotIn applies the NotIn predicate on the "update_datetime" field.
func UpdateDatetimeNotIn(vs ...time.Time) predicate.Blog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Blog(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldUpdateDatetime), v...))
	})
}

// UpdateDatetimeGT applies the GT predicate on the "update_datetime" field.
func UpdateDatetimeGT(v time.Time) predicate.Blog {
	return predicate.Blog(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdateDatetime), v))
	})
}

// UpdateDatetimeGTE applies the GTE predicate on the "update_datetime" field.
func UpdateDatetimeGTE(v time.Time) predicate.Blog {
	return predicate.Blog(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdateDatetime), v))
	})
}

// UpdateDatetimeLT applies the LT predicate on the "update_datetime" field.
func UpdateDatetimeLT(v time.Time) predicate.Blog {
	return predicate.Blog(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdateDatetime), v))
	})
}

// UpdateDatetimeLTE applies the LTE predicate on the "update_datetime" field.
func UpdateDatetimeLTE(v time.Time) predicate.Blog {
	return predicate.Blog(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdateDatetime), v))
	})
}

// CreateDatetimeEQ applies the EQ predicate on the "create_datetime" field.
func CreateDatetimeEQ(v time.Time) predicate.Blog {
	return predicate.Blog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateDatetime), v))
	})
}

// CreateDatetimeNEQ applies the NEQ predicate on the "create_datetime" field.
func CreateDatetimeNEQ(v time.Time) predicate.Blog {
	return predicate.Blog(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreateDatetime), v))
	})
}

// CreateDatetimeIn applies the In predicate on the "create_datetime" field.
func CreateDatetimeIn(vs ...time.Time) predicate.Blog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Blog(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCreateDatetime), v...))
	})
}

// CreateDatetimeNotIn applies the NotIn predicate on the "create_datetime" field.
func CreateDatetimeNotIn(vs ...time.Time) predicate.Blog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Blog(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCreateDatetime), v...))
	})
}

// CreateDatetimeGT applies the GT predicate on the "create_datetime" field.
func CreateDatetimeGT(v time.Time) predicate.Blog {
	return predicate.Blog(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreateDatetime), v))
	})
}

// CreateDatetimeGTE applies the GTE predicate on the "create_datetime" field.
func CreateDatetimeGTE(v time.Time) predicate.Blog {
	return predicate.Blog(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreateDatetime), v))
	})
}

// CreateDatetimeLT applies the LT predicate on the "create_datetime" field.
func CreateDatetimeLT(v time.Time) predicate.Blog {
	return predicate.Blog(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreateDatetime), v))
	})
}

// CreateDatetimeLTE applies the LTE predicate on the "create_datetime" field.
func CreateDatetimeLTE(v time.Time) predicate.Blog {
	return predicate.Blog(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreateDatetime), v))
	})
}

// HasComments applies the HasEdge predicate on the "comments" edge.
func HasComments() predicate.Blog {
	return predicate.Blog(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(CommentsTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, CommentsTable, CommentsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCommentsWith applies the HasEdge predicate on the "comments" edge with a given conditions (other predicates).
func HasCommentsWith(preds ...predicate.Comment) predicate.Blog {
	return predicate.Blog(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(CommentsInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, CommentsTable, CommentsColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Blog) predicate.Blog {
	return predicate.Blog(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Blog) predicate.Blog {
	return predicate.Blog(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Blog) predicate.Blog {
	return predicate.Blog(func(s *sql.Selector) {
		p(s.Not())
	})
}
