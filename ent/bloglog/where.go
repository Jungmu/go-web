// Code generated by ent, DO NOT EDIT.

package bloglog

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/jungmu/go-web/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int64) predicate.BlogLog {
	return predicate.BlogLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.BlogLog {
	return predicate.BlogLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.BlogLog {
	return predicate.BlogLog(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.BlogLog {
	return predicate.BlogLog(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.BlogLog {
	return predicate.BlogLog(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.BlogLog {
	return predicate.BlogLog(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.BlogLog {
	return predicate.BlogLog(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.BlogLog {
	return predicate.BlogLog(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.BlogLog {
	return predicate.BlogLog(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// BlogID applies equality check predicate on the "blog_id" field. It's identical to BlogIDEQ.
func BlogID(v int64) predicate.BlogLog {
	return predicate.BlogLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBlogID), v))
	})
}

// URL applies equality check predicate on the "url" field. It's identical to URLEQ.
func URL(v string) predicate.BlogLog {
	return predicate.BlogLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldURL), v))
	})
}

// Reason applies equality check predicate on the "reason" field. It's identical to ReasonEQ.
func Reason(v string) predicate.BlogLog {
	return predicate.BlogLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldReason), v))
	})
}

// Detail applies equality check predicate on the "detail" field. It's identical to DetailEQ.
func Detail(v string) predicate.BlogLog {
	return predicate.BlogLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDetail), v))
	})
}

// ClientIP applies equality check predicate on the "client_ip" field. It's identical to ClientIPEQ.
func ClientIP(v string) predicate.BlogLog {
	return predicate.BlogLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldClientIP), v))
	})
}

// CreateDatetime applies equality check predicate on the "create_datetime" field. It's identical to CreateDatetimeEQ.
func CreateDatetime(v time.Time) predicate.BlogLog {
	return predicate.BlogLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateDatetime), v))
	})
}

// BlogIDEQ applies the EQ predicate on the "blog_id" field.
func BlogIDEQ(v int64) predicate.BlogLog {
	return predicate.BlogLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBlogID), v))
	})
}

// BlogIDNEQ applies the NEQ predicate on the "blog_id" field.
func BlogIDNEQ(v int64) predicate.BlogLog {
	return predicate.BlogLog(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldBlogID), v))
	})
}

// BlogIDIn applies the In predicate on the "blog_id" field.
func BlogIDIn(vs ...int64) predicate.BlogLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.BlogLog(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldBlogID), v...))
	})
}

// BlogIDNotIn applies the NotIn predicate on the "blog_id" field.
func BlogIDNotIn(vs ...int64) predicate.BlogLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.BlogLog(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldBlogID), v...))
	})
}

// BlogIDGT applies the GT predicate on the "blog_id" field.
func BlogIDGT(v int64) predicate.BlogLog {
	return predicate.BlogLog(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldBlogID), v))
	})
}

// BlogIDGTE applies the GTE predicate on the "blog_id" field.
func BlogIDGTE(v int64) predicate.BlogLog {
	return predicate.BlogLog(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldBlogID), v))
	})
}

// BlogIDLT applies the LT predicate on the "blog_id" field.
func BlogIDLT(v int64) predicate.BlogLog {
	return predicate.BlogLog(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldBlogID), v))
	})
}

// BlogIDLTE applies the LTE predicate on the "blog_id" field.
func BlogIDLTE(v int64) predicate.BlogLog {
	return predicate.BlogLog(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldBlogID), v))
	})
}

// URLEQ applies the EQ predicate on the "url" field.
func URLEQ(v string) predicate.BlogLog {
	return predicate.BlogLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldURL), v))
	})
}

// URLNEQ applies the NEQ predicate on the "url" field.
func URLNEQ(v string) predicate.BlogLog {
	return predicate.BlogLog(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldURL), v))
	})
}

// URLIn applies the In predicate on the "url" field.
func URLIn(vs ...string) predicate.BlogLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.BlogLog(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldURL), v...))
	})
}

// URLNotIn applies the NotIn predicate on the "url" field.
func URLNotIn(vs ...string) predicate.BlogLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.BlogLog(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldURL), v...))
	})
}

// URLGT applies the GT predicate on the "url" field.
func URLGT(v string) predicate.BlogLog {
	return predicate.BlogLog(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldURL), v))
	})
}

// URLGTE applies the GTE predicate on the "url" field.
func URLGTE(v string) predicate.BlogLog {
	return predicate.BlogLog(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldURL), v))
	})
}

// URLLT applies the LT predicate on the "url" field.
func URLLT(v string) predicate.BlogLog {
	return predicate.BlogLog(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldURL), v))
	})
}

// URLLTE applies the LTE predicate on the "url" field.
func URLLTE(v string) predicate.BlogLog {
	return predicate.BlogLog(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldURL), v))
	})
}

// URLContains applies the Contains predicate on the "url" field.
func URLContains(v string) predicate.BlogLog {
	return predicate.BlogLog(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldURL), v))
	})
}

// URLHasPrefix applies the HasPrefix predicate on the "url" field.
func URLHasPrefix(v string) predicate.BlogLog {
	return predicate.BlogLog(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldURL), v))
	})
}

// URLHasSuffix applies the HasSuffix predicate on the "url" field.
func URLHasSuffix(v string) predicate.BlogLog {
	return predicate.BlogLog(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldURL), v))
	})
}

// URLEqualFold applies the EqualFold predicate on the "url" field.
func URLEqualFold(v string) predicate.BlogLog {
	return predicate.BlogLog(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldURL), v))
	})
}

// URLContainsFold applies the ContainsFold predicate on the "url" field.
func URLContainsFold(v string) predicate.BlogLog {
	return predicate.BlogLog(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldURL), v))
	})
}

// ReasonEQ applies the EQ predicate on the "reason" field.
func ReasonEQ(v string) predicate.BlogLog {
	return predicate.BlogLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldReason), v))
	})
}

// ReasonNEQ applies the NEQ predicate on the "reason" field.
func ReasonNEQ(v string) predicate.BlogLog {
	return predicate.BlogLog(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldReason), v))
	})
}

// ReasonIn applies the In predicate on the "reason" field.
func ReasonIn(vs ...string) predicate.BlogLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.BlogLog(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldReason), v...))
	})
}

// ReasonNotIn applies the NotIn predicate on the "reason" field.
func ReasonNotIn(vs ...string) predicate.BlogLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.BlogLog(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldReason), v...))
	})
}

// ReasonGT applies the GT predicate on the "reason" field.
func ReasonGT(v string) predicate.BlogLog {
	return predicate.BlogLog(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldReason), v))
	})
}

// ReasonGTE applies the GTE predicate on the "reason" field.
func ReasonGTE(v string) predicate.BlogLog {
	return predicate.BlogLog(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldReason), v))
	})
}

// ReasonLT applies the LT predicate on the "reason" field.
func ReasonLT(v string) predicate.BlogLog {
	return predicate.BlogLog(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldReason), v))
	})
}

// ReasonLTE applies the LTE predicate on the "reason" field.
func ReasonLTE(v string) predicate.BlogLog {
	return predicate.BlogLog(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldReason), v))
	})
}

// ReasonContains applies the Contains predicate on the "reason" field.
func ReasonContains(v string) predicate.BlogLog {
	return predicate.BlogLog(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldReason), v))
	})
}

// ReasonHasPrefix applies the HasPrefix predicate on the "reason" field.
func ReasonHasPrefix(v string) predicate.BlogLog {
	return predicate.BlogLog(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldReason), v))
	})
}

// ReasonHasSuffix applies the HasSuffix predicate on the "reason" field.
func ReasonHasSuffix(v string) predicate.BlogLog {
	return predicate.BlogLog(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldReason), v))
	})
}

// ReasonEqualFold applies the EqualFold predicate on the "reason" field.
func ReasonEqualFold(v string) predicate.BlogLog {
	return predicate.BlogLog(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldReason), v))
	})
}

// ReasonContainsFold applies the ContainsFold predicate on the "reason" field.
func ReasonContainsFold(v string) predicate.BlogLog {
	return predicate.BlogLog(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldReason), v))
	})
}

// DetailEQ applies the EQ predicate on the "detail" field.
func DetailEQ(v string) predicate.BlogLog {
	return predicate.BlogLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDetail), v))
	})
}

// DetailNEQ applies the NEQ predicate on the "detail" field.
func DetailNEQ(v string) predicate.BlogLog {
	return predicate.BlogLog(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDetail), v))
	})
}

// DetailIn applies the In predicate on the "detail" field.
func DetailIn(vs ...string) predicate.BlogLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.BlogLog(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldDetail), v...))
	})
}

// DetailNotIn applies the NotIn predicate on the "detail" field.
func DetailNotIn(vs ...string) predicate.BlogLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.BlogLog(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldDetail), v...))
	})
}

// DetailGT applies the GT predicate on the "detail" field.
func DetailGT(v string) predicate.BlogLog {
	return predicate.BlogLog(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDetail), v))
	})
}

// DetailGTE applies the GTE predicate on the "detail" field.
func DetailGTE(v string) predicate.BlogLog {
	return predicate.BlogLog(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDetail), v))
	})
}

// DetailLT applies the LT predicate on the "detail" field.
func DetailLT(v string) predicate.BlogLog {
	return predicate.BlogLog(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDetail), v))
	})
}

// DetailLTE applies the LTE predicate on the "detail" field.
func DetailLTE(v string) predicate.BlogLog {
	return predicate.BlogLog(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDetail), v))
	})
}

// DetailContains applies the Contains predicate on the "detail" field.
func DetailContains(v string) predicate.BlogLog {
	return predicate.BlogLog(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldDetail), v))
	})
}

// DetailHasPrefix applies the HasPrefix predicate on the "detail" field.
func DetailHasPrefix(v string) predicate.BlogLog {
	return predicate.BlogLog(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldDetail), v))
	})
}

// DetailHasSuffix applies the HasSuffix predicate on the "detail" field.
func DetailHasSuffix(v string) predicate.BlogLog {
	return predicate.BlogLog(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldDetail), v))
	})
}

// DetailEqualFold applies the EqualFold predicate on the "detail" field.
func DetailEqualFold(v string) predicate.BlogLog {
	return predicate.BlogLog(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldDetail), v))
	})
}

// DetailContainsFold applies the ContainsFold predicate on the "detail" field.
func DetailContainsFold(v string) predicate.BlogLog {
	return predicate.BlogLog(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldDetail), v))
	})
}

// ClientIPEQ applies the EQ predicate on the "client_ip" field.
func ClientIPEQ(v string) predicate.BlogLog {
	return predicate.BlogLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldClientIP), v))
	})
}

// ClientIPNEQ applies the NEQ predicate on the "client_ip" field.
func ClientIPNEQ(v string) predicate.BlogLog {
	return predicate.BlogLog(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldClientIP), v))
	})
}

// ClientIPIn applies the In predicate on the "client_ip" field.
func ClientIPIn(vs ...string) predicate.BlogLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.BlogLog(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldClientIP), v...))
	})
}

// ClientIPNotIn applies the NotIn predicate on the "client_ip" field.
func ClientIPNotIn(vs ...string) predicate.BlogLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.BlogLog(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldClientIP), v...))
	})
}

// ClientIPGT applies the GT predicate on the "client_ip" field.
func ClientIPGT(v string) predicate.BlogLog {
	return predicate.BlogLog(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldClientIP), v))
	})
}

// ClientIPGTE applies the GTE predicate on the "client_ip" field.
func ClientIPGTE(v string) predicate.BlogLog {
	return predicate.BlogLog(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldClientIP), v))
	})
}

// ClientIPLT applies the LT predicate on the "client_ip" field.
func ClientIPLT(v string) predicate.BlogLog {
	return predicate.BlogLog(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldClientIP), v))
	})
}

// ClientIPLTE applies the LTE predicate on the "client_ip" field.
func ClientIPLTE(v string) predicate.BlogLog {
	return predicate.BlogLog(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldClientIP), v))
	})
}

// ClientIPContains applies the Contains predicate on the "client_ip" field.
func ClientIPContains(v string) predicate.BlogLog {
	return predicate.BlogLog(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldClientIP), v))
	})
}

// ClientIPHasPrefix applies the HasPrefix predicate on the "client_ip" field.
func ClientIPHasPrefix(v string) predicate.BlogLog {
	return predicate.BlogLog(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldClientIP), v))
	})
}

// ClientIPHasSuffix applies the HasSuffix predicate on the "client_ip" field.
func ClientIPHasSuffix(v string) predicate.BlogLog {
	return predicate.BlogLog(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldClientIP), v))
	})
}

// ClientIPEqualFold applies the EqualFold predicate on the "client_ip" field.
func ClientIPEqualFold(v string) predicate.BlogLog {
	return predicate.BlogLog(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldClientIP), v))
	})
}

// ClientIPContainsFold applies the ContainsFold predicate on the "client_ip" field.
func ClientIPContainsFold(v string) predicate.BlogLog {
	return predicate.BlogLog(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldClientIP), v))
	})
}

// CreateDatetimeEQ applies the EQ predicate on the "create_datetime" field.
func CreateDatetimeEQ(v time.Time) predicate.BlogLog {
	return predicate.BlogLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateDatetime), v))
	})
}

// CreateDatetimeNEQ applies the NEQ predicate on the "create_datetime" field.
func CreateDatetimeNEQ(v time.Time) predicate.BlogLog {
	return predicate.BlogLog(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreateDatetime), v))
	})
}

// CreateDatetimeIn applies the In predicate on the "create_datetime" field.
func CreateDatetimeIn(vs ...time.Time) predicate.BlogLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.BlogLog(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCreateDatetime), v...))
	})
}

// CreateDatetimeNotIn applies the NotIn predicate on the "create_datetime" field.
func CreateDatetimeNotIn(vs ...time.Time) predicate.BlogLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.BlogLog(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCreateDatetime), v...))
	})
}

// CreateDatetimeGT applies the GT predicate on the "create_datetime" field.
func CreateDatetimeGT(v time.Time) predicate.BlogLog {
	return predicate.BlogLog(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreateDatetime), v))
	})
}

// CreateDatetimeGTE applies the GTE predicate on the "create_datetime" field.
func CreateDatetimeGTE(v time.Time) predicate.BlogLog {
	return predicate.BlogLog(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreateDatetime), v))
	})
}

// CreateDatetimeLT applies the LT predicate on the "create_datetime" field.
func CreateDatetimeLT(v time.Time) predicate.BlogLog {
	return predicate.BlogLog(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreateDatetime), v))
	})
}

// CreateDatetimeLTE applies the LTE predicate on the "create_datetime" field.
func CreateDatetimeLTE(v time.Time) predicate.BlogLog {
	return predicate.BlogLog(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreateDatetime), v))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.BlogLog) predicate.BlogLog {
	return predicate.BlogLog(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.BlogLog) predicate.BlogLog {
	return predicate.BlogLog(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.BlogLog) predicate.BlogLog {
	return predicate.BlogLog(func(s *sql.Selector) {
		p(s.Not())
	})
}
