// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/jungmu/go-web/ent/blog"
	"github.com/jungmu/go-web/ent/comment"
)

// BlogCreate is the builder for creating a Blog entity.
type BlogCreate struct {
	config
	mutation *BlogMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetTitle sets the "title" field.
func (bc *BlogCreate) SetTitle(s string) *BlogCreate {
	bc.mutation.SetTitle(s)
	return bc
}

// SetSubTitle sets the "sub_title" field.
func (bc *BlogCreate) SetSubTitle(s string) *BlogCreate {
	bc.mutation.SetSubTitle(s)
	return bc
}

// SetNillableSubTitle sets the "sub_title" field if the given value is not nil.
func (bc *BlogCreate) SetNillableSubTitle(s *string) *BlogCreate {
	if s != nil {
		bc.SetSubTitle(*s)
	}
	return bc
}

// SetTags sets the "tags" field.
func (bc *BlogCreate) SetTags(s string) *BlogCreate {
	bc.mutation.SetTags(s)
	return bc
}

// SetNillableTags sets the "tags" field if the given value is not nil.
func (bc *BlogCreate) SetNillableTags(s *string) *BlogCreate {
	if s != nil {
		bc.SetTags(*s)
	}
	return bc
}

// SetContent sets the "content" field.
func (bc *BlogCreate) SetContent(s string) *BlogCreate {
	bc.mutation.SetContent(s)
	return bc
}

// SetUpdateDatetime sets the "update_datetime" field.
func (bc *BlogCreate) SetUpdateDatetime(t time.Time) *BlogCreate {
	bc.mutation.SetUpdateDatetime(t)
	return bc
}

// SetNillableUpdateDatetime sets the "update_datetime" field if the given value is not nil.
func (bc *BlogCreate) SetNillableUpdateDatetime(t *time.Time) *BlogCreate {
	if t != nil {
		bc.SetUpdateDatetime(*t)
	}
	return bc
}

// SetCreateDatetime sets the "create_datetime" field.
func (bc *BlogCreate) SetCreateDatetime(t time.Time) *BlogCreate {
	bc.mutation.SetCreateDatetime(t)
	return bc
}

// SetNillableCreateDatetime sets the "create_datetime" field if the given value is not nil.
func (bc *BlogCreate) SetNillableCreateDatetime(t *time.Time) *BlogCreate {
	if t != nil {
		bc.SetCreateDatetime(*t)
	}
	return bc
}

// SetID sets the "id" field.
func (bc *BlogCreate) SetID(i int64) *BlogCreate {
	bc.mutation.SetID(i)
	return bc
}

// AddCommentIDs adds the "comments" edge to the Comment entity by IDs.
func (bc *BlogCreate) AddCommentIDs(ids ...int64) *BlogCreate {
	bc.mutation.AddCommentIDs(ids...)
	return bc
}

// AddComments adds the "comments" edges to the Comment entity.
func (bc *BlogCreate) AddComments(c ...*Comment) *BlogCreate {
	ids := make([]int64, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return bc.AddCommentIDs(ids...)
}

// Mutation returns the BlogMutation object of the builder.
func (bc *BlogCreate) Mutation() *BlogMutation {
	return bc.mutation
}

// Save creates the Blog in the database.
func (bc *BlogCreate) Save(ctx context.Context) (*Blog, error) {
	var (
		err  error
		node *Blog
	)
	bc.defaults()
	if len(bc.hooks) == 0 {
		if err = bc.check(); err != nil {
			return nil, err
		}
		node, err = bc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*BlogMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = bc.check(); err != nil {
				return nil, err
			}
			bc.mutation = mutation
			if node, err = bc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(bc.hooks) - 1; i >= 0; i-- {
			if bc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = bc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, bc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Blog)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from BlogMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (bc *BlogCreate) SaveX(ctx context.Context) *Blog {
	v, err := bc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bc *BlogCreate) Exec(ctx context.Context) error {
	_, err := bc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bc *BlogCreate) ExecX(ctx context.Context) {
	if err := bc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (bc *BlogCreate) defaults() {
	if _, ok := bc.mutation.SubTitle(); !ok {
		v := blog.DefaultSubTitle
		bc.mutation.SetSubTitle(v)
	}
	if _, ok := bc.mutation.Tags(); !ok {
		v := blog.DefaultTags
		bc.mutation.SetTags(v)
	}
	if _, ok := bc.mutation.UpdateDatetime(); !ok {
		v := blog.DefaultUpdateDatetime()
		bc.mutation.SetUpdateDatetime(v)
	}
	if _, ok := bc.mutation.CreateDatetime(); !ok {
		v := blog.DefaultCreateDatetime()
		bc.mutation.SetCreateDatetime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (bc *BlogCreate) check() error {
	if _, ok := bc.mutation.Title(); !ok {
		return &ValidationError{Name: "title", err: errors.New(`ent: missing required field "Blog.title"`)}
	}
	if _, ok := bc.mutation.SubTitle(); !ok {
		return &ValidationError{Name: "sub_title", err: errors.New(`ent: missing required field "Blog.sub_title"`)}
	}
	if _, ok := bc.mutation.Tags(); !ok {
		return &ValidationError{Name: "tags", err: errors.New(`ent: missing required field "Blog.tags"`)}
	}
	if _, ok := bc.mutation.Content(); !ok {
		return &ValidationError{Name: "content", err: errors.New(`ent: missing required field "Blog.content"`)}
	}
	if _, ok := bc.mutation.UpdateDatetime(); !ok {
		return &ValidationError{Name: "update_datetime", err: errors.New(`ent: missing required field "Blog.update_datetime"`)}
	}
	if _, ok := bc.mutation.CreateDatetime(); !ok {
		return &ValidationError{Name: "create_datetime", err: errors.New(`ent: missing required field "Blog.create_datetime"`)}
	}
	return nil
}

func (bc *BlogCreate) sqlSave(ctx context.Context) (*Blog, error) {
	_node, _spec := bc.createSpec()
	if err := sqlgraph.CreateNode(ctx, bc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	return _node, nil
}

func (bc *BlogCreate) createSpec() (*Blog, *sqlgraph.CreateSpec) {
	var (
		_node = &Blog{config: bc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: blog.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: blog.FieldID,
			},
		}
	)
	_spec.OnConflict = bc.conflict
	if id, ok := bc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := bc.mutation.Title(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: blog.FieldTitle,
		})
		_node.Title = value
	}
	if value, ok := bc.mutation.SubTitle(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: blog.FieldSubTitle,
		})
		_node.SubTitle = value
	}
	if value, ok := bc.mutation.Tags(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: blog.FieldTags,
		})
		_node.Tags = value
	}
	if value, ok := bc.mutation.Content(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: blog.FieldContent,
		})
		_node.Content = value
	}
	if value, ok := bc.mutation.UpdateDatetime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: blog.FieldUpdateDatetime,
		})
		_node.UpdateDatetime = value
	}
	if value, ok := bc.mutation.CreateDatetime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: blog.FieldCreateDatetime,
		})
		_node.CreateDatetime = value
	}
	if nodes := bc.mutation.CommentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   blog.CommentsTable,
			Columns: []string{blog.CommentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: comment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Blog.Create().
//		SetTitle(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.BlogUpsert) {
//			SetTitle(v+v).
//		}).
//		Exec(ctx)
func (bc *BlogCreate) OnConflict(opts ...sql.ConflictOption) *BlogUpsertOne {
	bc.conflict = opts
	return &BlogUpsertOne{
		create: bc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Blog.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (bc *BlogCreate) OnConflictColumns(columns ...string) *BlogUpsertOne {
	bc.conflict = append(bc.conflict, sql.ConflictColumns(columns...))
	return &BlogUpsertOne{
		create: bc,
	}
}

type (
	// BlogUpsertOne is the builder for "upsert"-ing
	//  one Blog node.
	BlogUpsertOne struct {
		create *BlogCreate
	}

	// BlogUpsert is the "OnConflict" setter.
	BlogUpsert struct {
		*sql.UpdateSet
	}
)

// SetTitle sets the "title" field.
func (u *BlogUpsert) SetTitle(v string) *BlogUpsert {
	u.Set(blog.FieldTitle, v)
	return u
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *BlogUpsert) UpdateTitle() *BlogUpsert {
	u.SetExcluded(blog.FieldTitle)
	return u
}

// SetSubTitle sets the "sub_title" field.
func (u *BlogUpsert) SetSubTitle(v string) *BlogUpsert {
	u.Set(blog.FieldSubTitle, v)
	return u
}

// UpdateSubTitle sets the "sub_title" field to the value that was provided on create.
func (u *BlogUpsert) UpdateSubTitle() *BlogUpsert {
	u.SetExcluded(blog.FieldSubTitle)
	return u
}

// SetTags sets the "tags" field.
func (u *BlogUpsert) SetTags(v string) *BlogUpsert {
	u.Set(blog.FieldTags, v)
	return u
}

// UpdateTags sets the "tags" field to the value that was provided on create.
func (u *BlogUpsert) UpdateTags() *BlogUpsert {
	u.SetExcluded(blog.FieldTags)
	return u
}

// SetContent sets the "content" field.
func (u *BlogUpsert) SetContent(v string) *BlogUpsert {
	u.Set(blog.FieldContent, v)
	return u
}

// UpdateContent sets the "content" field to the value that was provided on create.
func (u *BlogUpsert) UpdateContent() *BlogUpsert {
	u.SetExcluded(blog.FieldContent)
	return u
}

// SetUpdateDatetime sets the "update_datetime" field.
func (u *BlogUpsert) SetUpdateDatetime(v time.Time) *BlogUpsert {
	u.Set(blog.FieldUpdateDatetime, v)
	return u
}

// UpdateUpdateDatetime sets the "update_datetime" field to the value that was provided on create.
func (u *BlogUpsert) UpdateUpdateDatetime() *BlogUpsert {
	u.SetExcluded(blog.FieldUpdateDatetime)
	return u
}

// SetCreateDatetime sets the "create_datetime" field.
func (u *BlogUpsert) SetCreateDatetime(v time.Time) *BlogUpsert {
	u.Set(blog.FieldCreateDatetime, v)
	return u
}

// UpdateCreateDatetime sets the "create_datetime" field to the value that was provided on create.
func (u *BlogUpsert) UpdateCreateDatetime() *BlogUpsert {
	u.SetExcluded(blog.FieldCreateDatetime)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Blog.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(blog.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *BlogUpsertOne) UpdateNewValues() *BlogUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(blog.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Blog.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *BlogUpsertOne) Ignore() *BlogUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *BlogUpsertOne) DoNothing() *BlogUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the BlogCreate.OnConflict
// documentation for more info.
func (u *BlogUpsertOne) Update(set func(*BlogUpsert)) *BlogUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&BlogUpsert{UpdateSet: update})
	}))
	return u
}

// SetTitle sets the "title" field.
func (u *BlogUpsertOne) SetTitle(v string) *BlogUpsertOne {
	return u.Update(func(s *BlogUpsert) {
		s.SetTitle(v)
	})
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *BlogUpsertOne) UpdateTitle() *BlogUpsertOne {
	return u.Update(func(s *BlogUpsert) {
		s.UpdateTitle()
	})
}

// SetSubTitle sets the "sub_title" field.
func (u *BlogUpsertOne) SetSubTitle(v string) *BlogUpsertOne {
	return u.Update(func(s *BlogUpsert) {
		s.SetSubTitle(v)
	})
}

// UpdateSubTitle sets the "sub_title" field to the value that was provided on create.
func (u *BlogUpsertOne) UpdateSubTitle() *BlogUpsertOne {
	return u.Update(func(s *BlogUpsert) {
		s.UpdateSubTitle()
	})
}

// SetTags sets the "tags" field.
func (u *BlogUpsertOne) SetTags(v string) *BlogUpsertOne {
	return u.Update(func(s *BlogUpsert) {
		s.SetTags(v)
	})
}

// UpdateTags sets the "tags" field to the value that was provided on create.
func (u *BlogUpsertOne) UpdateTags() *BlogUpsertOne {
	return u.Update(func(s *BlogUpsert) {
		s.UpdateTags()
	})
}

// SetContent sets the "content" field.
func (u *BlogUpsertOne) SetContent(v string) *BlogUpsertOne {
	return u.Update(func(s *BlogUpsert) {
		s.SetContent(v)
	})
}

// UpdateContent sets the "content" field to the value that was provided on create.
func (u *BlogUpsertOne) UpdateContent() *BlogUpsertOne {
	return u.Update(func(s *BlogUpsert) {
		s.UpdateContent()
	})
}

// SetUpdateDatetime sets the "update_datetime" field.
func (u *BlogUpsertOne) SetUpdateDatetime(v time.Time) *BlogUpsertOne {
	return u.Update(func(s *BlogUpsert) {
		s.SetUpdateDatetime(v)
	})
}

// UpdateUpdateDatetime sets the "update_datetime" field to the value that was provided on create.
func (u *BlogUpsertOne) UpdateUpdateDatetime() *BlogUpsertOne {
	return u.Update(func(s *BlogUpsert) {
		s.UpdateUpdateDatetime()
	})
}

// SetCreateDatetime sets the "create_datetime" field.
func (u *BlogUpsertOne) SetCreateDatetime(v time.Time) *BlogUpsertOne {
	return u.Update(func(s *BlogUpsert) {
		s.SetCreateDatetime(v)
	})
}

// UpdateCreateDatetime sets the "create_datetime" field to the value that was provided on create.
func (u *BlogUpsertOne) UpdateCreateDatetime() *BlogUpsertOne {
	return u.Update(func(s *BlogUpsert) {
		s.UpdateCreateDatetime()
	})
}

// Exec executes the query.
func (u *BlogUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for BlogCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *BlogUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *BlogUpsertOne) ID(ctx context.Context) (id int64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *BlogUpsertOne) IDX(ctx context.Context) int64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// BlogCreateBulk is the builder for creating many Blog entities in bulk.
type BlogCreateBulk struct {
	config
	builders []*BlogCreate
	conflict []sql.ConflictOption
}

// Save creates the Blog entities in the database.
func (bcb *BlogCreateBulk) Save(ctx context.Context) ([]*Blog, error) {
	specs := make([]*sqlgraph.CreateSpec, len(bcb.builders))
	nodes := make([]*Blog, len(bcb.builders))
	mutators := make([]Mutator, len(bcb.builders))
	for i := range bcb.builders {
		func(i int, root context.Context) {
			builder := bcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*BlogMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, bcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = bcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, bcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, bcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (bcb *BlogCreateBulk) SaveX(ctx context.Context) []*Blog {
	v, err := bcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bcb *BlogCreateBulk) Exec(ctx context.Context) error {
	_, err := bcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bcb *BlogCreateBulk) ExecX(ctx context.Context) {
	if err := bcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Blog.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.BlogUpsert) {
//			SetTitle(v+v).
//		}).
//		Exec(ctx)
func (bcb *BlogCreateBulk) OnConflict(opts ...sql.ConflictOption) *BlogUpsertBulk {
	bcb.conflict = opts
	return &BlogUpsertBulk{
		create: bcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Blog.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (bcb *BlogCreateBulk) OnConflictColumns(columns ...string) *BlogUpsertBulk {
	bcb.conflict = append(bcb.conflict, sql.ConflictColumns(columns...))
	return &BlogUpsertBulk{
		create: bcb,
	}
}

// BlogUpsertBulk is the builder for "upsert"-ing
// a bulk of Blog nodes.
type BlogUpsertBulk struct {
	create *BlogCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Blog.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(blog.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *BlogUpsertBulk) UpdateNewValues() *BlogUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(blog.FieldID)
				return
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Blog.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *BlogUpsertBulk) Ignore() *BlogUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *BlogUpsertBulk) DoNothing() *BlogUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the BlogCreateBulk.OnConflict
// documentation for more info.
func (u *BlogUpsertBulk) Update(set func(*BlogUpsert)) *BlogUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&BlogUpsert{UpdateSet: update})
	}))
	return u
}

// SetTitle sets the "title" field.
func (u *BlogUpsertBulk) SetTitle(v string) *BlogUpsertBulk {
	return u.Update(func(s *BlogUpsert) {
		s.SetTitle(v)
	})
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *BlogUpsertBulk) UpdateTitle() *BlogUpsertBulk {
	return u.Update(func(s *BlogUpsert) {
		s.UpdateTitle()
	})
}

// SetSubTitle sets the "sub_title" field.
func (u *BlogUpsertBulk) SetSubTitle(v string) *BlogUpsertBulk {
	return u.Update(func(s *BlogUpsert) {
		s.SetSubTitle(v)
	})
}

// UpdateSubTitle sets the "sub_title" field to the value that was provided on create.
func (u *BlogUpsertBulk) UpdateSubTitle() *BlogUpsertBulk {
	return u.Update(func(s *BlogUpsert) {
		s.UpdateSubTitle()
	})
}

// SetTags sets the "tags" field.
func (u *BlogUpsertBulk) SetTags(v string) *BlogUpsertBulk {
	return u.Update(func(s *BlogUpsert) {
		s.SetTags(v)
	})
}

// UpdateTags sets the "tags" field to the value that was provided on create.
func (u *BlogUpsertBulk) UpdateTags() *BlogUpsertBulk {
	return u.Update(func(s *BlogUpsert) {
		s.UpdateTags()
	})
}

// SetContent sets the "content" field.
func (u *BlogUpsertBulk) SetContent(v string) *BlogUpsertBulk {
	return u.Update(func(s *BlogUpsert) {
		s.SetContent(v)
	})
}

// UpdateContent sets the "content" field to the value that was provided on create.
func (u *BlogUpsertBulk) UpdateContent() *BlogUpsertBulk {
	return u.Update(func(s *BlogUpsert) {
		s.UpdateContent()
	})
}

// SetUpdateDatetime sets the "update_datetime" field.
func (u *BlogUpsertBulk) SetUpdateDatetime(v time.Time) *BlogUpsertBulk {
	return u.Update(func(s *BlogUpsert) {
		s.SetUpdateDatetime(v)
	})
}

// UpdateUpdateDatetime sets the "update_datetime" field to the value that was provided on create.
func (u *BlogUpsertBulk) UpdateUpdateDatetime() *BlogUpsertBulk {
	return u.Update(func(s *BlogUpsert) {
		s.UpdateUpdateDatetime()
	})
}

// SetCreateDatetime sets the "create_datetime" field.
func (u *BlogUpsertBulk) SetCreateDatetime(v time.Time) *BlogUpsertBulk {
	return u.Update(func(s *BlogUpsert) {
		s.SetCreateDatetime(v)
	})
}

// UpdateCreateDatetime sets the "create_datetime" field to the value that was provided on create.
func (u *BlogUpsertBulk) UpdateCreateDatetime() *BlogUpsertBulk {
	return u.Update(func(s *BlogUpsert) {
		s.UpdateCreateDatetime()
	})
}

// Exec executes the query.
func (u *BlogUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the BlogCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for BlogCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *BlogUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
